import os


ace_modules_file = "node_modules/ace-builds/ace-modules.d.ts"
ace_modules = []
mode_ace = []

mode_ace_template = """import { lazy } from "react";

const AceMode = {
  ******
};

export default AceMode;"""

tsx_template = """// the code is generated by the generator script at ./generate.py
import "ace-builds/src-noconflict/mode-******";
import "ace-builds/src-noconflict/snippets/******";
import { ReactNode } from "react";

export interface IndexProps {
  children: ReactNode;
}
export default function index(props: IndexProps) {
  return <>{props.children}</>;
}
"""


def load():
    with open(ace_modules_file, "r") as f:
        for line in f:
            if "ace-builds/src-noconflict/mode-" in line:
                mode = line.split("mode-")[1].split("';")[0]
                print(f"find 'ace-builds/src-noconflict/mode-{mode}'")
                ace_modules.append(f"ace-builds/src-noconflict/mode-{mode}")


def get_name(ace_module):

    name_key = ace_module.split("/mode-")[-1]

    filename = "Ace" + "".join([x.capitalize()
                                for x in name_key.split("_")]) + ".tsx"

    return name_key, filename


def generate_tsx(ace_module):
    os.chdir(os.path.dirname(os.path.abspath(__file__)))
    for name, filename in [get_name(ace_module)]:
        mode_ace.append(
            f'"{name}": lazy(() => import("./{filename.replace(".tsx","")}")),')
        print(f"generate {filename}")
        with open(f"./{filename}", "w") as f:
            f.write(tsx_template.replace("******", name))

    with open("./ModeAce.ts", "w") as f:
        f.write(mode_ace_template.replace("******", "\n".join(mode_ace)))


load()

for module in ace_modules:
    generate_tsx(module)
